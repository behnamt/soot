{"version":3,"sources":["serviceWorker.ts","lib/services/IpfsService.ts","lib/classes/WrappedAccount.ts","context/Web3.tsx","lib/services/EncryptionService.ts","lib/scripts/saveDescription.ts","lib/services/storage/AppStorage.service.ts","lib/services/storage/LocalStorage.ts","lib/services/storage/ReportStorage.ts","lib/utils.ts","lib/classes/SootFacade.ts","context/Soot.tsx","lib/services/KeyValueWalletService.ts","lib/services/WalletService.ts","components/Auth/CreateWalletForm.tsx","components/Auth/ImportWalletForm.tsx","lib/scripts/createWallet.ts","lib/scripts/createWalletFromPrivateKey.ts","components/Auth/CreateWallet.tsx","components/Auth/UnlockWallet.tsx","components/Auth/LoginHeader.tsx","@types/IToast.types.ts","components/Auth/Login.tsx","hooks/usePosition.ts","lib/services/BingApi.ts","components/Toast/Toast.tsx","context/Toast.tsx","context/Event.tsx","components/Map/BingMap.tsx","pages/Report.tsx","pages/Locations.tsx","components/Layout/BottomBar.tsx","components/Incident/IncidentListItem.tsx","pages/Incidents.tsx","lib/scripts/loadDescription.ts","components/Incident/IncidentDetail.tsx","components/Messenger/MessengerListItem.tsx","pages/Messenger.tsx","lib/services/storage/ChatStorage.ts","pages/MessengerChat.tsx","components/Layout/MenuBar.tsx","components/Layout/Navigation.tsx","components/App.tsx","context/IPFS.tsx","components/ContextAwarApp.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ipfsNode","WrappedAccount","address","this","transactionConfig","callback","Error","data","password","web3Context","React","createContext","isMetaMask","web3Instance","account","connect","disconnect","getPublicKey","useWeb3","useContext","Web3Provider","children","web3","useState","setWeb3Instance","setAccount","setIsMetaMask","handleAccountsChanged","accounts","a","length","firstAccount","console","debug","useEffect","ethereum","Web3","on","providers","WebsocketProvider","process","Promise","resolve","reject","privateKey","EthCrypto","publicKeyByPrivateKey","currentProvider","send","jsonrpc","method","params","err","result","error","_account","selectedAddress","code","useWeb3Provider","Provider","value","encrypt","message","publicKey","signature","sign","hash","keccak256","payload","encryptWithPublicKey","JSON","stringify","encrypted","cipher","decrypt","cipherText","parse","decryptWithPrivateKey","decrypted","decryptedPayload","senderAddress","recover","sender","saveDescription","ipfs","content","isEncrypted","_content","add","entry","cid","startNode","IPFS","create","EXPERIMENTAL","pubsub","config","Addresses","Swarm","read","fileContent","chunks","chunk","push","Buffer","concat","toString","getContent","cat","v0CidToBytes32","from","bytes","slice","alloc","bytes32ToV0Cid","hex","cidBytes","utils","hexToBytes","CID","storage","localStorage","key","getItem","setItem","reportStorage","allMyReportsKey","storedData","items","isReportKeyAvailable","count","report","Array","isArray","reports","duplicatesRemoved","filter","item","index","self","indexOf","name","getAllReports","allEvents","some","createEmptyReportsStorage","formatDate","date","d","Date","setUTCMilliseconds","month","getMonth","day","getDate","year","getFullYear","hours","getHours","minutes","getMinutes","join","GEO_RESOLUTION","SootRegistryFacade","contractAddress","contract","contractInstance","eth","Contract","SootRegistryJSON","abi","getPublickey","description","methods","register","lat","toFixed","lon","now","gas","getAllIncidents","call","transactionresult","incidents","ids","names","lats","lons","isEncrypteds","forEach","id","hexToUtf8","Number","startPosition","endPosition","getPastEvents","fromBlock","toBlock","allRegisteredEvents","returnValues","_lat","_lon","lng","map","_cid","_date","_name","getAllReportsOfVictim","all","getIncident","incident","allRepeatedAttaks","event","author","_author","isTheAuthor","hasAHistoryEvent","isInReports","sootContext","sootRegistryFacade","useSoot","SootProvider","setSootRegistryFacade","SootFacade","useSootProvider","KeyValueWalletService","keyValueStore","walletKey","hasWalletAccount","ensureExists","jsonKeyStore","decryptWallet","accountIndex","loadWallet","getAccount","encryptedKeystore","wallet","privateKeyToAccount","addAccount","numberOfAccounts","walletAccounts","i","accountIdx","ret","size","CreateWalletForm","props","onSubmittableChanged","setPassword","confirmPassword","setConfirmPassword","Fragment","Typography","variant","align","Box","mb","display","justifyContent","width","mt","TextField","placeholder","type","onChange","target","ImportWalletForm","setprivateKey","createWallet","walletPassword","walletService","createAccounts","keystore","encryptWallet","writeWallet","privateKeyRegex","RegExp","createWalletFromPrivateKey","persistentWallet","_privateKey","test","addAccountByPrivateKey","CreateWallet","privatekey","setPrivateKey","errorMessage","setErrorMessage","isSubmittable","setIsSubmittable","isLoading","setIsLoading","isCreatingWallet","setIsCreatingWallet","submit","onSubmit","p","flexDirection","Button","color","disabled","title","onClick","UnlockWallet","loadAccount","EToastTypes","EToastColors","HeaderBox","styled","div","LoginHeader","getWallet","Login","localWallet","setLocalWallet","useAsync","promiseFn","useCallback","onResolve","onReject","defaultSettings","enableHighAccuracy","timeout","Infinity","maximumAge","usePosition","settings","position","setPosition","setError","coords","timestamp","latitude","longitude","accuracy","onError","navigator","geolocation","getCurrentPosition","Microsoft","Toast","onRemove","removeRef","useRef","current","setTimeout","clearTimeout","Alert","severity","ToastContext","remove","toasts","ToastProvider","providerValue","setToasts","autoHide","INFO","Math","random","substring","toast","useToastProvider","eventsContext","events","proposedNotifications","addReportEvent","useEvents","useEventsprovider","setEvents","setProposedNotifications","fetchMyReports","getAllIncidentsForVictim","myReports","reportedNames","setReports","newProposedNotifications","getAllRepeatedEvents","temp","isReportStorageEmpty","EventsProvider","loadBingApi","url","script","document","createElement","async","defer","src","GetMap","onerror","body","appendChild","BingMap","mapOptions","marks","height","mapRef","setMap","Maps","Map","setOptions","initMap","mark","loc","Location","pin","Pushpin","text","draggable","entities","ref","className","style","harassmentTypes","label","Report","setName","setType","setDescription","setIsEncrypted","isCurrentLocation","setIsCurrentLocation","FormControl","fullWidth","multiline","rows","InputLabel","Select","labelId","MenuItem","FormControlLabel","control","Checkbox","checked","center","Locations","setIncidents","setStartPosition","setEndPosition","getAllRegisterEvents","list","fetch","response","json","locality","resourceSets","resources","bboxResponse","bboxBody","bbox","AlertTitle","BottomBar","hasNotificationProposals","setHasNotificationProposals","Object","keys","px","to","textDecoration","IconButton","FlagOutlined","List","MessageTwoTone","IncidentListItem","history","useHistory","Pending","Skeleton","animation","Fulfilled","ListItem","ListItemText","primary","secondary","Rejected","Incidents","getAllIncidentIdsForVictim","loadDescription","decryptedContent","IncidentDetail","incidentId","useParams","FilledInput","MessengerListItem","participants","component","alignContent","makeBlockie","alt","marginLeft","borderRadius","Messenger","setNewProposedNotifications","chatStorage","chatKey","checkChatStorage","createChatStorage","MessengerChat","useLocation","setParticipants","messageList","setMessageList","currentText","setCurrentText","subscription","seqno","avatar","addChat","sendMessage","e","preventDefault","publish","state","subscribe","msg","unsubscribe","getAllChats","initialChats","flex","alignItems","overflowY","maxHeight","py","alignSelf","marginRight","aria-label","Send","fontSize","MenuBar","menuName","setMenuName","pathname","AppBar","Toolbar","Navigation","exact","path","App","ipfsContext","isPending","IpfsProvider","useIpfsProvider","ContextAwareApp","icon","ReactDOM","render","StrictMode","Container","maxWidth","backgroundColor","paddingLeft","paddingRight","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e0a7a23e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.debug(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.debug(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.debug('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.debug('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import Web3 from 'web3';\nimport IPFS, { Buffer, CID } from 'ipfs';\nimport ipfsClient from 'ipfs-http-client';\n\nimport { IpfsConfigInterface } from '../../@types/IpfsConfig.types';\nimport { IpfsTreeItemInterface } from '../../@types/Ipfs.types';\n\nlet ipfsNode: IPFS;\n\n// run a node locally, e.g. in browser\n// https://github.com/ipfs/js-ipfs/blob/master/packages/ipfs/docs/FAQ.md#how-to-enable-webrtc-support-for-js-ipfs-in-the-browser\n\nasync function startNode(): Promise<IPFS> {\n  ipfsNode = await IPFS.create({\n    EXPERIMENTAL: {\n      pubsub: true, // required, enables pubsub\n    },\n    config: {\n      Addresses: {\n        Swarm: [\n          '/ip4/127.0.0.1/tcp/9090/wss/p2p-webrtc-star',\n          // These are public webrtc-star servers\n          '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',\n          '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star',\n        ],\n      },\n    },\n  });\n\n  return ipfsNode;\n}\n\nfunction stopNode(): Promise<void> {\n  return ipfsNode.stop();\n}\n// connect to a http node\nfunction connectNode(config: IpfsConfigInterface): void {\n  ipfsNode = ipfsClient(config);\n}\n\nasync function add(content: string | string[]): Promise<string[]> {\n  const addResult = ipfsNode.add(content);\n  const results = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for await (const result of addResult) {\n    results.push(result);\n  }\n\n  return results;\n}\n\nasync function read(fileContent: string): Promise<string> {\n  const chunks: string[] = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for await (const chunk of fileContent) {\n    chunks.push(chunk);\n  }\n\n  return Buffer.concat(chunks).toString();\n}\n\nasync function getContent(cid: string): Promise<string> {\n  const content: string = await ipfsNode.cat(cid);\n\n  return read(content);\n}\n\nasync function getContentFromDir(folderCid: string | CID, filename: string): Promise<string> {\n  if (typeof folderCid !== 'string') {\n    // eslint-disable-next-line no-param-reassign\n    folderCid = folderCid.toString();\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for await (const file of ipfsNode.ls(folderCid)) {\n    if (file.name === filename) {\n      return getContent(file.cid);\n    }\n  }\n\n  return '';\n}\n\nasync function ls(\n  folderCid: string | CID | Buffer,\n  visitor?: (file: IpfsTreeItemInterface) => void,\n): Promise<IpfsTreeItemInterface[]> {\n  const files = [];\n\n  // eslint-disable-next-line no-restricted-syntax\n  for await (const file of ipfsNode.ls(folderCid)) {\n    if (visitor) {\n      await visitor(file);\n    }\n\n    files.push(file);\n  }\n\n  return files;\n}\n\nfunction hex2hash(cidAsHex: string): CID {\n  const bytes = Web3.utils.hexToBytes(cidAsHex);\n  const cid = new CID(Buffer.from(bytes));\n\n  return cid;\n}\n\n/**\n * strips the first 2 bytes of that cid\n * https://nodejs.org/api/buffer.html#buffer_buffers_and_typedarrays\n */\nfunction v0CidToBytes32(cid: CID | null): Buffer {\n  if (cid) {\n    return Buffer.from(cid.bytes.slice(2)); // chopping off the [18,32] header\n  }\n\n  return Buffer.alloc(32, 0);\n}\n\nfunction bytes32ToV0Cid(hex: string): CID {\n  const cidBytes = Buffer.from(Web3.utils.hexToBytes(hex));\n\n  // add the v0 cid header section back again\n  return new CID(Buffer.concat([Buffer.from([18, 32]), cidBytes]));\n}\n\nfunction publish(name: string, message: string, from: string): void {\n  if (ipfsNode) {\n    const data = Buffer.from(\n      JSON.stringify({\n        from,\n        content: message,\n      }),\n    );\n\n    ipfsNode.pubsub.publish(`${process.env.REACT_APP_SOOT_REGISTRY_CONTRACT_ADDRESS}-${name}`, data, (err) => {\n      if (err) {\n        console.debug('error publishing: ', err);\n      } else {\n        console.debug('successfully published message');\n      }\n    });\n  }\n}\n\nfunction subscribe(name: string, address: string, callback: (object) => void): void {\n  if (ipfsNode) {\n    console.debug('SUBSCRIBING TO');\n\n    ipfsNode.pubsub.subscribe(`${process.env.REACT_APP_SOOT_REGISTRY_CONTRACT_ADDRESS}-${name}`, (msg) => {\n      try {\n        const content = JSON.parse(msg.data.toString('utf-8'));\n        const seqno = msg.seqno.toString('utf-8');\n        // if (content.from !== address){\n        callback({ ...content, seqno });\n        // }\n      } catch {\n        console.debug('ERROR');\n      }\n    });\n  }\n}\n\nfunction unsubscribe(name: string): void {\n  if (ipfsNode) {\n    ipfsNode.pubsub.unsubscribe(`${process.env.REACT_APP_SOOT_REGISTRY_CONTRACT_ADDRESS}-${name}`);\n  }\n}\n\nexport {\n  add,\n  connectNode,\n  getContent,\n  getContentFromDir,\n  hex2hash,\n  ls,\n  read,\n  startNode,\n  stopNode,\n  ipfsNode,\n  v0CidToBytes32,\n  bytes32ToV0Cid,\n  publish,\n  subscribe,\n  unsubscribe,\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars, no-unused-vars, class-methods-use-this */\n\nimport { Account, TransactionConfig, SignedTransaction, Sign, EncryptedKeystoreV3Json } from 'web3-core';\n\nexport default class WrappedAccount implements Account {\n  address: string;\n\n  constructor(address: string) {\n    this.address = address;\n  }\n\n  signTransaction(\n    transactionConfig: TransactionConfig,\n    callback?: (signTransaction: SignedTransaction) => void,\n  ): Promise<SignedTransaction> {\n    throw new Error('signing not supported in Wrapped accounts');\n  }\n\n  sign(data: string): Sign {\n    throw new Error('signing not supported in Wrapped accounts');\n  }\n\n  encrypt(password: string): EncryptedKeystoreV3Json {\n    throw new Error('cant use encrypt in a wrapped account');\n  }\n\n  get privateKey(): string {\n    throw new Error(\"I'm a wrapped account\");\n  }\n}\n","import React, { useState, useContext, useEffect } from 'react';\nimport Web3 from 'web3';\nimport EthCrypto from 'eth-crypto';\nimport { Account, HttpProvider } from 'web3-core';\nimport WrappedAccount from '../lib/classes/WrappedAccount';\nimport { IWeb3Context } from '../@types/IWeb3Context';\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare let ethereum: any;\n\nconst web3Context = React.createContext<IWeb3Context>({\n  isMetaMask: false,\n  web3Instance: null,\n  account: null,\n  connect: () => null,\n  disconnect: () => null,\n  getPublicKey: () => null,\n});\n\nconst useWeb3 = (): IWeb3Context => useContext(web3Context);\n\nconst useWeb3Provider = (): IWeb3Context => {\n  const [web3Instance, setWeb3Instance] = useState<Web3 | null>(null);\n  const [account, setAccount] = useState<Account | null>(null);\n  const [isMetaMask, setIsMetaMask] = useState<boolean>(false);\n\n  const handleAccountsChanged = async (accounts: (string | Account)[]): Promise<void> => {\n    if (accounts.length === 0) {\n      setAccount(null);\n    } else {\n      const firstAccount = typeof accounts[0] === 'string' ? new WrappedAccount(accounts[0] as string) : accounts[0];\n      setAccount(firstAccount);\n      console.debug('account changed: %s', firstAccount.address);\n    }\n  };\n\n  useEffect((): void => {\n    if (window.ethereum) {\n      const web3: Web3 = new Web3(ethereum);\n      setIsMetaMask(true);\n      setWeb3Instance(web3);\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n    } else {\n      const web3: Web3 = new Web3(new Web3.providers.WebsocketProvider(process.env.REACT_APP_ETHEREUM_NODE));\n      setWeb3Instance(web3);\n    }\n  }, []); // eslint-disable-line\n\n  const getPublicKey = async (): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      if (typeof window !== 'undefined' && window.ethereum) {\n        const provider = web3Instance.currentProvider as HttpProvider;\n\n        provider.send(\n          {\n            jsonrpc: '2.0',\n            method: 'eth_getEncryptionPublicKey',\n            params: [account],\n          },\n          // eslint-disable-next-line\n          (err: Error, result: any) => {\n            if (err || !result) {\n              return reject(err);\n            }\n            if (result.error) {\n              return reject(result.error);\n            }\n\n            return resolve(result.result);\n          },\n        );\n      } else {\n        if (!account.privateKey) {\n          return reject(new Error('no private key provided'));\n        }\n\n        return resolve(EthCrypto.publicKeyByPrivateKey(account.privateKey));\n      }\n    });\n  };\n\n  const connect = async (_account: Account | string): Promise<void> => {\n    try {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          const account = await window.ethereum.selectedAddress;\n          handleAccountsChanged([account]);\n        } catch (error) {\n          console.debug(error);\n        }\n      } else {\n        await handleAccountsChanged([_account]);\n      }\n    } catch (err) {\n      if (err.code === 4001) {\n        throw new Error('Please connect to MetaMask.');\n      } else {\n        throw new Error(err);\n      }\n    }\n  };\n\n  const disconnect = async (): Promise<void> => {\n    setAccount(null);\n  };\n\n  return {\n    isMetaMask,\n    web3Instance,\n    account,\n    connect,\n    disconnect,\n    getPublicKey,\n  };\n};\n\nconst Web3Provider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n  const web3 = useWeb3Provider();\n\n  return <web3Context.Provider value={web3}>{children}</web3Context.Provider>;\n};\n\nexport { Web3Provider, useWeb3 };\n","import EthCrypto from 'eth-crypto';\nimport { Account } from 'web3-core';\nimport { IDecryptResult } from '../../@types/IEncryptedDocument';\n\nconst encrypt = async (account: Account, message: string, publicKey: string): Promise<string> => {\n  const signature = EthCrypto.sign(account.privateKey, EthCrypto.hash.keccak256(message));\n\n  const payload = {\n    message,\n    signature,\n  };\n\n  const encrypted = await EthCrypto.encryptWithPublicKey(publicKey, JSON.stringify(payload));\n\n  return EthCrypto.cipher.stringify(encrypted);\n};\n\nconst decrypt = async (account: Account, cipherText: string): Promise<IDecryptResult> => {\n  const encrypted = EthCrypto.cipher.parse(cipherText);\n  const decrypted = await EthCrypto.decryptWithPrivateKey(account.privateKey, encrypted);\n\n  const decryptedPayload = JSON.parse(decrypted);\n\n  const senderAddress = EthCrypto.recover(\n    decryptedPayload.signature,\n    EthCrypto.hash.keccak256(decryptedPayload.message),\n  );\n\n  return {\n    message: decryptedPayload.message,\n    sender: senderAddress,\n  };\n};\n\nexport { encrypt, decrypt };\n","import IPFS, { CID } from 'ipfs';\nimport { encrypt } from '../services/EncryptionService';\nimport { Account } from 'web3-core';\n\nexport const saveDescription = async (\n  account: Account,\n  ipfs: IPFS,\n  content: string,\n  isEncrypted: boolean,\n  getPublicKey: () => Promise<string>,\n): Promise<CID> => {\n  let _content = content;\n  if (isEncrypted) {\n    _content = await encrypt(account, content, await getPublicKey());\n  }\n  const entry = await ipfs.add(_content);\n\n  return entry.cid;\n};\n","import LocalStorage from './LocalStorage';\n\nconst storage = new LocalStorage();\n\nexport default storage;\n","import { IKeyValueStorage } from '../../../@types/IKeyValueStorage.types';\n\nexport default class LocalStorage implements IKeyValueStorage {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public storage: any;\n\n  constructor() {\n    this.storage = window.localStorage;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public getItem(key: string): any {\n    return JSON.parse(this.storage.getItem(key));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public async setItem(key: string, value: Record<string, any>): Promise<void> {\n    this.storage.setItem(key, JSON.stringify(value));\n  }\n}\n","import storage from './AppStorage.service';\nimport LocalStorage from './LocalStorage';\n\ninterface IReportStorage {\n  count: number;\n  items: string[];\n}\n\nclass ReportStorage {\n  public storage: LocalStorage;\n\n  private readonly allMyReportsKey = 'myReports';\n\n  constructor() {\n    this.storage = storage;\n  }\n\n  public async getAllReports(): Promise<string[]> {\n    const storedData: IReportStorage = await this.storage.getItem(this.allMyReportsKey);\n\n    return storedData.items;\n  }\n\n  public async isReportStorageEmpty(): Promise<boolean> {\n    const isKeyAvailable = await this.isReportKeyAvailable();\n\n    if (!isKeyAvailable) {\n      return true;\n    }\n    const storedData: IReportStorage = await this.storage.getItem(this.allMyReportsKey);\n\n    return storedData.count === 0;\n  }\n\n  public async addReports(report: string | string[]): Promise<void> {\n    // TODO: do not add duplicate item\n    const storedData: IReportStorage = await this.storage.getItem(this.allMyReportsKey);\n    const content = !Array.isArray(report) ? [report] : report;\n    storedData.count += 1;\n    storedData.items = storedData.items.concat(content);\n    this.storage.setItem(this.allMyReportsKey, storedData);\n  }\n\n  public async setReports(reports: string[]): Promise<void> {\n    const duplicatesRemoved = reports.filter((item, index, self) => self.indexOf(item) === index);\n    const count = duplicatesRemoved.length;\n    this.storage.setItem(this.allMyReportsKey, { count, items: duplicatesRemoved });\n  }\n\n  public async isInReports(name: string): Promise<boolean> {\n    const allEvents = await this.getAllReports();\n\n    return allEvents.some((item) => item === name);\n  }\n\n  private async createEmptyReportsStorage(): Promise<void> {\n    this.storage.setItem(this.allMyReportsKey, {\n      count: 0,\n      items: [],\n    });\n  }\n\n  private async isReportKeyAvailable(): Promise<boolean> {\n    try {\n      const storedData = await this.storage.getItem(this.allMyReportsKey);\n\n      if (!storedData) {\n        throw new Error();\n      }\n\n      return true;\n    } catch {\n      await this.createEmptyReportsStorage();\n\n      return false;\n    }\n  }\n}\n\nconst reportStorage = new ReportStorage();\n\nexport default reportStorage;\n","export const formatDate = (date: number): string => {\n  const d = new Date(0);\n  d.setUTCMilliseconds(date);\n  let month = '' + (d.getMonth() + 1);\n  let day = '' + d.getDate();\n  const year = d.getFullYear();\n\n  if (month.length < 2) {\n    month = '0' + month;\n  }\n  if (day.length < 2) {\n    day = '0' + day;\n  }\n\n  const hours = d.getHours();\n  const minutes = d.getMinutes();\n\n  return [year, month, day].join('-') + ' ' + hours + ':' + minutes;\n};\n","import Web3 from 'web3';\nimport { Account } from 'web3-core';\nimport { Contract, EventData } from 'web3-eth-contract';\nimport { AbiItem, hexToUtf8 } from 'web3-utils';\nimport SootRegistryJSON from '../../abi/SootRegistry.json';\nimport { saveDescription } from '../scripts/saveDescription';\nimport { bytes32ToV0Cid, ipfsNode, v0CidToBytes32 } from '../services/IpfsService';\nimport reportStorage from '../services/storage/ReportStorage';\nimport { IPosition, IRepeatedEvent } from './../../@types/Event.types';\nimport { IFullIncident, IIncident, IIncidentEvent, IReport } from './../../@types/ISoot.types';\nimport { formatDate } from './../utils';\n\nconst GEO_RESOLUTION = 1000000;\n\nclass SootRegistryFacade {\n  public contract!: Contract;\n\n  private readonly web3: Web3;\n  private readonly account: Account;\n\n  constructor(web3: Web3, _account: Account, contractAddress: string) {\n    this.web3 = web3;\n    this.account = _account;\n    this.contract = this.contractInstance(_account.address, contractAddress);\n  }\n\n  private contractInstance(account: string, contractAddress: string): Contract {\n    return new this.web3.eth.Contract(SootRegistryJSON.abi as AbiItem[], contractAddress, {\n      from: account,\n    });\n  }\n\n  public async report(payload: IReport, account: Account, getPublickey: () => Promise<string>): Promise<void> {\n    const cid = await saveDescription(account, ipfsNode, payload.description, payload.isEncrypted, getPublickey);\n\n    return this.contract.methods\n      .register(\n        payload.name,\n        v0CidToBytes32(cid),\n        payload.isEncrypted,\n        (payload.lat * GEO_RESOLUTION).toFixed(),\n        (payload.lon * GEO_RESOLUTION).toFixed(),\n        Date.now(),\n      )\n      .send({\n        gas: 2500000,\n      });\n  }\n\n  public async getAllIncidents(): Promise<IIncident[]> {\n    const transactionresult = await this.contract.methods.getAllIncidents().call();\n    const incidents: IIncident[] = [];\n\n    const ids = transactionresult.ids;\n    const names = transactionresult.names;\n    const lats = transactionresult.lats;\n    const lons = transactionresult.lons;\n    const isEncrypteds = transactionresult.isEncrypted;\n\n    ids.forEach((id: string, index: number) => {\n      incidents.push({\n        id,\n        name: hexToUtf8(names[index]),\n        lat: Number(lats[index]) / GEO_RESOLUTION,\n        lon: Number(lons[index]) / GEO_RESOLUTION,\n        isEncrypted: isEncrypteds[index],\n      });\n    });\n\n    return incidents;\n  }\n\n  public async getAllRegisterEvents(startPosition: IPosition, endPosition: IPosition): Promise<IIncidentEvent[]> {\n    const allRegisteredEvents = await this.contract.getPastEvents('Register', {\n      fromBlock: 0,\n      toBlock: 'latest',\n    });\n\n    return allRegisteredEvents\n      .filter(\n        (item: EventData) =>\n          item.returnValues._lat > Number((startPosition.lat * GEO_RESOLUTION).toFixed()) &&\n          item.returnValues._lat < Number((endPosition.lat * GEO_RESOLUTION).toFixed()) &&\n          item.returnValues._lon > Number((startPosition.lng * GEO_RESOLUTION).toFixed()) &&\n          item.returnValues._lon < Number((endPosition.lng * GEO_RESOLUTION).toFixed()),\n      )\n      .map((item) => ({\n        cid: bytes32ToV0Cid(item.returnValues._cid).toString(),\n        lat: item.returnValues._lat / GEO_RESOLUTION,\n        lon: item.returnValues._lon / GEO_RESOLUTION,\n        date: new Date(0).setUTCMilliseconds(item.returnValues._date).toString(),\n        id: item.returnValues.id,\n        isEncrypted: item.returnValues.isEncrypted,\n        name: hexToUtf8(item.returnValues._name),\n      }));\n  }\n\n  public getAllIncidentIdsForVictim(address: string): Promise<string[]> {\n    return this.contract.methods.getAllReportsOfVictim(address).call();\n  }\n\n  public async getAllIncidentsForVictim(address: string): Promise<IFullIncident[]> {\n    console.debug(address);\n\n    const ids = await this.contract.methods.getAllReportsOfVictim(address).call();\n\n    return Promise.all(ids.map((id) => this.getIncident(id)));\n  }\n\n  public async getIncident(id: number): Promise<IFullIncident> {\n    const incident: IFullIncident = await this.contract.methods.getIncident(id).call();\n\n    return {\n      ...incident,\n      cid: bytes32ToV0Cid(incident.cid).toString(),\n      lat: incident.lat / GEO_RESOLUTION,\n      lon: incident.lon / GEO_RESOLUTION,\n      name: hexToUtf8(incident.name),\n      date: formatDate(Number(incident.date)),\n    };\n  }\n\n  public async getAllRepeatedEvents(): Promise<IRepeatedEvent[]> {\n    const allRepeatedAttaks = await this.contract.getPastEvents('RepeatedAttack', {\n      fromBlock: 0,\n      toBlock: 'latest',\n    });\n\n    return Promise.all(\n      allRepeatedAttaks\n        .map(\n          (event: EventData): IRepeatedEvent => ({\n            author: event.returnValues._author,\n            name: hexToUtf8(event.returnValues._name),\n            date: formatDate(event.returnValues._date),\n          }),\n        )\n        .filter((event: IRepeatedEvent) => !this.isTheAuthor(event.author) && this.hasAHistoryEvent(event.name)),\n    );\n  }\n  private hasAHistoryEvent(name: string): Promise<boolean> {\n    return reportStorage.isInReports(name);\n  }\n  private isTheAuthor(author: string): boolean {\n    return author === this.account.address;\n  }\n}\n\nexport default SootRegistryFacade;\n","import React, { useState, useContext, useEffect } from 'react';\nimport { useWeb3 } from './Web3';\nimport SootFacade from '../lib/classes/SootFacade';\nimport SootRegistryFacade from '../lib/classes/SootFacade';\n\ninterface ISootContext {\n  sootRegistryFacade: SootRegistryFacade | null;\n}\n\nconst sootContext = React.createContext<ISootContext>({\n  sootRegistryFacade: null,\n});\n\nconst useSoot = (): ISootContext => useContext(sootContext);\n\nconst useSootProvider = (): ISootContext => {\n  const [sootRegistryFacade, setSootRegistryFacade] = useState<SootRegistryFacade | null>(null);\n  const { web3Instance, account } = useWeb3();\n\n  useEffect((): void => {\n    if (account) {\n      setSootRegistryFacade(\n        new SootFacade(web3Instance, account, process.env.REACT_APP_SOOT_REGISTRY_CONTRACT_ADDRESS),\n      );\n    }\n  }, [account]);\n\n  return {\n    sootRegistryFacade,\n  };\n};\n\nconst SootProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n  const sootRegistryFacade = useSootProvider();\n\n  return <sootContext.Provider value={sootRegistryFacade}>{children}</sootContext.Provider>;\n};\n\nexport { SootProvider, useSoot };\n","import { WalletBase, Account } from 'web3-core';\nimport Web3 from 'web3';\nimport WalletService from './WalletService';\nimport IPersistentWallet from '../../@types/IPersistentWallet.types';\nimport { IKeyValueStorage } from '../../@types/IKeyValueStorage.types';\n\nexport default class KeyValueWalletService extends WalletService implements IPersistentWallet {\n  private keyValueStore: IKeyValueStorage;\n\n  private walletKey: string;\n\n  constructor(web3: Web3, keyValueStore: IKeyValueStorage, walletKey = 'wallet.keystore') {\n    super(web3);\n    this.keyValueStore = keyValueStore;\n    this.walletKey = walletKey;\n  }\n\n  public ensureExists(): void {\n    if (!this.keyValueStore.getItem(this.walletKey)) {\n      throw new Error(\"wallet doesn't exist\");\n    }\n\n    if (!this.hasWalletAccount()) {\n      throw new Error(\"wallet doesn't exist\");\n    }\n  }\n\n  public writeWallet(content: string): void {\n    this.keyValueStore.setItem(this.walletKey, content);\n  }\n\n  public loadWallet(password: string): WalletBase {\n    this.ensureExists();\n    const jsonKeyStore = JSON.parse(this.keyValueStore.getItem(this.walletKey));\n\n    return this.decryptWallet(jsonKeyStore, password);\n  }\n\n  public loadAccount(password: string, accountIndex = 0): Account {\n    this.loadWallet(password);\n\n    return this.getAccount(accountIndex);\n  }\n\n  private hasWalletAccount(): boolean {\n    const jsonKeyStore = JSON.parse(this.keyValueStore.getItem(this.walletKey));\n\n    return jsonKeyStore.length > 0;\n  }\n}\n","import Web3 from 'web3';\nimport { Account, WalletBase, EncryptedKeystoreV3Json } from 'web3-core';\n\nexport default class WalletService {\n  private readonly web3: Web3;\n\n  private encryptedKeystore: EncryptedKeystoreV3Json[]; // represents a keystore\n\n  private wallet: WalletBase; // the \"loaded\" (decrypted) wallet\n\n  constructor(web3: Web3) {\n    this.web3 = web3;\n    this.wallet = web3.eth.accounts.wallet;\n    this.encryptedKeystore = [];\n  }\n\n  public decryptWallet(encryptedKeystore: EncryptedKeystoreV3Json[], password: string): WalletBase {\n    this.encryptedKeystore = encryptedKeystore;\n    this.wallet = this.web3.eth.accounts.wallet.decrypt(encryptedKeystore, password);\n\n    return this.wallet;\n  }\n\n  public encryptWallet(password: string): EncryptedKeystoreV3Json[] {\n    this.encryptedKeystore = this.web3.eth.accounts.wallet.encrypt(password);\n\n    return this.encryptedKeystore;\n  }\n\n  public addAccountByPrivateKey(privateKey: string): Account {\n    const account = this.web3.eth.accounts.privateKeyToAccount(privateKey);\n\n    return this.addAccount(account);\n  }\n\n  public addAccount(account: Account): Account {\n    this.wallet.add(account);\n\n    return account;\n  }\n\n  public get size(): number {\n    return this.wallet.length;\n  }\n\n  public get accounts(): Account[] {\n    const ret = [];\n    // a wallet is not iterable :(\n    for (let i = 0; i < this.size; i++) {\n      ret.push(this.wallet[i]);\n    }\n\n    return ret;\n  }\n\n  public createAccounts(numberOfAccounts = 1): Account[] {\n    if (!this.wallet) {\n      throw new Error('you must load a wallet before you can use it');\n    }\n    const walletAccounts = [];\n    for (let i = 0; i < numberOfAccounts; i++) {\n      const account = this.web3.eth.accounts.create();\n      walletAccounts.push(account);\n      this.wallet.add(account);\n    }\n\n    return walletAccounts;\n  }\n\n  public getAccount(accountIdx = 0): Account {\n    if (!this.wallet) {\n      throw new Error('you must load a wallet before you can use it');\n    }\n\n    if (!this.wallet[accountIdx]) {\n      throw new Error(`no account at position ${accountIdx}`);\n    }\n\n    return this.wallet[accountIdx];\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Box, TextField, Typography } from '@material-ui/core';\n\ninterface ICreateWalletFormProps {\n  onSubmittableChanged: (password: string) => void;\n}\nexport const CreateWalletForm: React.FC<ICreateWalletFormProps> = (props: ICreateWalletFormProps) => {\n  const { onSubmittableChanged } = props;\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  useEffect((): void => {\n    const submittable = password !== '' && password === confirmPassword;\n    onSubmittableChanged(submittable ? password : '');\n  }, [password, confirmPassword]);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"subtitle1\" align=\"center\">\n        To start using the app, create your own wallet\n      </Typography>\n\n      <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1} mt={2}>\n        <TextField\n          variant=\"outlined\"\n          placeholder=\"Password\"\n          type=\"password\"\n          onChange={(event): void => setPassword(event.target.value)}\n          value={password}\n        />\n      </Box>\n      <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1}>\n        <TextField\n          variant=\"outlined\"\n          placeholder=\"Confirm password\"\n          type=\"password\"\n          onChange={(event): void => setConfirmPassword(event.target.value)}\n          value={confirmPassword}\n        />\n      </Box>\n    </React.Fragment>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Box, TextField, Typography } from '@material-ui/core';\n\ninterface IImportWalletFormProps {\n  onSubmittableChanged: (password: string, privateKey: string) => void;\n}\nexport const ImportWalletForm: React.FC<IImportWalletFormProps> = (props: IImportWalletFormProps) => {\n  const { onSubmittableChanged } = props;\n  const [password, setPassword] = useState('');\n  const [privateKey, setprivateKey] = useState('');\n\n  useEffect((): void => {\n    const submittable = password !== '' && privateKey !== '';\n    submittable ? onSubmittableChanged(password, privateKey) : onSubmittableChanged('', '');\n  }, [password, privateKey]);\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"subtitle1\" align=\"center\">\n        Fill the form to import your wallet\n      </Typography>\n\n      <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1} mt={2}>\n        <TextField\n          variant=\"outlined\"\n          placeholder=\"Password\"\n          type=\"password\"\n          onChange={(event): void => setPassword(event.target.value)}\n          value={password}\n        />\n      </Box>\n      <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1}>\n        <TextField\n          variant=\"outlined\"\n          placeholder=\"Private key\"\n          type=\"password\"\n          onChange={(event): void => setprivateKey(event.target.value)}\n          value={privateKey}\n        />\n      </Box>\n    </React.Fragment>\n  );\n};\n","import { Account } from 'web3-core';\nimport IPersistentWallet from '../../@types/IPersistentWallet.types';\nimport WalletService from '../services/WalletService';\n\nconst createWallet = (\n  walletPassword: string,\n  numberOfAccounts = 1,\n  walletService: WalletService & IPersistentWallet,\n): Account[] => {\n  const accounts = walletService.createAccounts(numberOfAccounts);\n  const keystore = walletService.encryptWallet(walletPassword);\n  walletService.writeWallet(JSON.stringify(keystore, null, 2));\n\n  return accounts;\n};\n\nexport default createWallet;\n","import { Account } from 'web3-core';\nimport WalletService from '../services/WalletService';\nimport IPersistentWallet from '../../@types/IPersistentWallet.types';\nimport createWallet from './createWallet';\n\nconst privateKeyRegex = new RegExp('^0x');\n\nconst createWalletFromPrivateKey = async (\n  walletPassword: string,\n  privateKey: string,\n  persistentWallet: WalletService & IPersistentWallet,\n): Promise<Account> => {\n  // eslint-disable-next-line no-underscore-dangle\n  let _privateKey = privateKey;\n  if (!privateKeyRegex.test(_privateKey)) {\n    _privateKey = `0x${_privateKey}`;\n  }\n\n  try {\n    persistentWallet.loadWallet(walletPassword);\n  } catch (error) {\n    createWallet(walletPassword, 0, persistentWallet);\n  }\n\n  const account = persistentWallet.addAccountByPrivateKey(_privateKey);\n  const keystore = persistentWallet.encryptWallet(walletPassword);\n  persistentWallet.writeWallet(JSON.stringify(keystore, null, 2));\n\n  return account;\n};\n\nexport default createWalletFromPrivateKey;\n","import React, { useState } from 'react';\nimport { useWeb3 } from '../../context/Web3';\nimport KeyValueWalletService from '../../lib/services/KeyValueWalletService';\nimport storage from '../../lib/services/storage/AppStorage.service';\nimport { Box, Button, Typography } from '@material-ui/core';\nimport { CreateWalletForm } from './CreateWalletForm';\nimport { ImportWalletForm } from './ImportWalletForm';\nimport createWallet from '../../lib/scripts/createWallet';\nimport createWalletFromPrivateKey from '../../lib/scripts/createWalletFromPrivateKey';\n\nexport const CreateWallet: React.FC = () => {\n  const [password, setPassword] = useState('');\n  const [privatekey, setPrivateKey] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [isSubmittable, setIsSubmittable] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isCreatingWallet, setIsCreatingWallet] = useState(true);\n\n  const { web3Instance, connect } = useWeb3();\n\n  const submit = async (): Promise<void> => {\n    if (isSubmittable) {\n      setIsLoading(true);\n      try {\n        const wallet = new KeyValueWalletService(web3Instance, storage);\n        let account;\n        if (isCreatingWallet) {\n          [account] = createWallet(password, 1, wallet);\n        } else {\n          account = createWalletFromPrivateKey(password, privatekey, wallet);\n        }\n\n        console.debug('saved wallet with public address: %s', account.address);\n\n        setIsLoading(false);\n        // goes after loading because its effect will destroy us\n        await connect(account);\n      } catch (error) {\n        setIsLoading(false);\n        setErrorMessage(error.message);\n      }\n    }\n  };\n\n  const toggle = (): void => {\n    setIsCreatingWallet(!isCreatingWallet);\n    setIsSubmittable(false);\n  };\n\n  const createWalletFormSubmittableChanged = (password: string): void => {\n    if (!password) {\n      setIsSubmittable(false);\n      setPassword('');\n    } else {\n      setIsSubmittable(true);\n      setPassword(password);\n    }\n  };\n\n  const importWalletFormSubmittableChanged = (password: string, privateKey: string): void => {\n    if (!password) {\n      setIsSubmittable(false);\n      setPassword('');\n      setPrivateKey('');\n    } else {\n      setIsSubmittable(true);\n      setPassword(password);\n      setPrivateKey(privateKey);\n    }\n  };\n\n  return (\n    <form onSubmit={submit}>\n      <Box p={3} display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\n        {isCreatingWallet ? (\n          <CreateWalletForm onSubmittableChanged={createWalletFormSubmittableChanged} />\n        ) : (\n          <ImportWalletForm onSubmittableChanged={importWalletFormSubmittableChanged} />\n        )}\n        <Typography variant=\"caption\" align=\"center\">\n          {errorMessage}\n        </Typography>\n        <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1}>\n          <Button variant=\"contained\" color=\"primary\" disabled={!password || isLoading} title=\"Login\" onClick={submit}>\n            {isCreatingWallet ? 'Create Wallet' : 'Import Wallet'}\n          </Button>\n        </Box>\n        <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1}>\n          <Button variant=\"outlined\" color=\"primary\" title=\"Import\" onClick={toggle}>\n            {isCreatingWallet ? 'Or Import wallet' : 'Or Create a wallet'}\n          </Button>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useWeb3 } from '../../context/Web3';\nimport KeyValueWalletService from '../../lib/services/KeyValueWalletService';\nimport storage from '../../lib/services/storage/AppStorage.service';\nimport { Box, TextField, Button } from '@material-ui/core';\n\nexport const UnlockWallet: React.FC = () => {\n  const [password, setPassword] = useState('');\n  const { connect, web3Instance } = useWeb3();\n\n  const submit = async (): Promise<void> => {\n    const walletService = new KeyValueWalletService(web3Instance, storage);\n    const account = await walletService.loadAccount(password, 0);\n    connect(account);\n  };\n\n  return (\n    <form onSubmit={submit}>\n      <Box p={3} display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\n        <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1}>\n          <TextField\n            type=\"password\"\n            variant=\"outlined\"\n            onChange={(event): void => setPassword(event.target.value)}\n            value={password}\n          />\n        </Box>\n        <Box mb={2} display=\"flex\" justifyContent=\"center\" width={1}>\n          <Button disabled={!password} title=\"Login\" color=\"primary\" onClick={submit}>\n            Login\n          </Button>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst HeaderBox = styled.div`\n  padding-top: 15px;\n  height: 25vh;\n  width: 100%;\n  background-color: #1d6f6f;\n`;\n\nexport const LoginHeader: React.FC = () => {\n  return (\n    <HeaderBox>\n      <Typography variant=\"h1\" align=\"center\">\n        ĐSoot\n      </Typography>\n      <Typography variant=\"h6\" align=\"center\">\n        A very catchy catch phrase\n      </Typography>\n    </HeaderBox>\n  );\n};\n","export interface IToast {\n  id: string;\n  content: string;\n  autoHide: boolean;\n  type?: EToastTypes;\n}\n\nexport interface IToastProps {\n  remove: () => void;\n  content: string;\n  autoHide: boolean;\n  type?: EToastTypes;\n}\n\nexport interface IToastContext {\n  add: (content: string) => void;\n  remove: (id: string) => void;\n  toasts: IToast[];\n}\n\nexport enum EToastTypes {\n  INFO = 'info',\n  WARNING = 'warning',\n  ALERT = 'alert',\n  SUCCESS = 'success',\n}\n\nexport enum EToastColors {\n  LIGHT = 'light',\n  INFO = 'info',\n  SUCCESS = 'success',\n  WARNING = 'warning',\n  ALERT = 'danger',\n}\n","import { Box, Button, Typography } from '@material-ui/core';\nimport React, { useCallback, useState } from 'react';\nimport { useWeb3 } from '../../context/Web3';\nimport KeyValueWalletService from '../../lib/services/KeyValueWalletService';\nimport storage from '../../lib/services/storage/AppStorage.service';\nimport { CreateWallet } from './CreateWallet';\nimport { UnlockWallet } from './UnlockWallet';\nimport { LoginHeader } from './LoginHeader';\nimport { useAsync } from 'react-async';\n\nconst getWallet = async (web3Instance): Promise<KeyValueWalletService> => {\n  try {\n    const wallet = new KeyValueWalletService(web3Instance, storage);\n    await wallet.ensureExists();\n\n    return wallet;\n  } catch (e) {\n    throw e;\n  }\n};\n\nexport const Login: React.FC = () => {\n  const [localWallet, setLocalWallet] = useState<KeyValueWalletService>();\n  const { web3Instance, isMetaMask, connect } = useWeb3();\n\n  useAsync({\n    promiseFn: useCallback(() => getWallet(web3Instance), []),\n    onResolve: setLocalWallet,\n    onReject: (error: Error) => console.debug(error),\n  });\n\n  const connectToWallet = (): void => {\n    connect();\n  };\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <LoginHeader />\n      {isMetaMask ? (\n        <Box p={3} display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\n          <Typography variant=\"subtitle1\">Seems like you have a built in wallet</Typography>\n          <Button variant=\"contained\" color=\"primary\" title=\"Import\" onClick={connectToWallet}>\n            Connect with Wallet\n          </Button>\n        </Box>\n      ) : localWallet ? (\n        <UnlockWallet />\n      ) : (\n        <CreateWallet />\n      )}\n    </Box>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { IPosition, GeolocationCoordinates, GeolocationPositionError } from '../@types/IPosition';\n\nconst defaultSettings = {\n  enableHighAccuracy: false,\n  timeout: Infinity,\n  maximumAge: 0,\n};\n\nexport const usePosition = (settings = defaultSettings): { position: IPosition; error: string } => {\n  const [position, setPosition] = useState<IPosition>();\n  const [error, setError] = useState('');\n\n  const onChange = ({ coords, timestamp }: { coords: GeolocationCoordinates; timestamp: number }): void => {\n    setPosition({\n      latitude: coords.latitude,\n      longitude: coords.longitude,\n      accuracy: coords.accuracy,\n      timestamp,\n    });\n  };\n\n  const onError = (error: GeolocationPositionError): void => {\n    setError(error.message);\n  };\n\n  useEffect((): void => {\n    if (!navigator || !navigator.geolocation) {\n      setError('Geolocation is not supported');\n    }\n    navigator.geolocation.getCurrentPosition(onChange, onError, settings);\n  }, [settings]);\n\n  return { position, error };\n};\n","export interface MapWindow extends Window {\n  GetMap: () => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  Microsoft: any;\n}\n\ndeclare let window: MapWindow;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let Microsoft: any;\n\nexport function loadBingApi(key?: string): Promise<void> {\n  let url = `http://www.bing.com/api/maps/mapcontrol?callback=GetMap&&key=${process.env.REACT_APP_BING_API_KEY}`;\n  if (key) {\n    url += `&key=${key}`;\n  }\n\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.src = url;\n    window.GetMap = (): void => {\n      Microsoft = window.Microsoft;\n      resolve();\n    };\n    script.onerror = (error: Event | string): void => {\n      reject(error);\n    };\n    document.body.appendChild(script);\n  });\n}\n","import React, { useEffect, useRef, PropsWithChildren } from 'react';\nimport { Alert } from '@material-ui/lab';\n\ninterface IToastProps {\n  onRemove: () => void;\n}\n\nexport const Toast: React.FC<PropsWithChildren<IToastProps>> = (props: PropsWithChildren<IToastProps>) => {\n  const { onRemove, children } = props;\n  const duration = 5000;\n  const removeRef = useRef<() => void>();\n\n  removeRef.current = onRemove;\n\n  useEffect(() => {\n    const id = setTimeout(() => removeRef.current(), duration);\n\n    return (): void => clearTimeout(id);\n  }, []);\n\n  return (\n    <Alert severity=\"success\" color=\"info\">\n      {children}\n    </Alert>\n  );\n};\n","import React, { useCallback, useContext, useState } from 'react';\nimport { IToast, IToastContext, EToastTypes } from '../@types/IToast.types';\nimport { Toast } from '../components/Toast/Toast';\n\nconst ToastContext = React.createContext<IToastContext>({\n  add: () => null,\n  remove: () => null,\n  toasts: [],\n});\n\nconst useToast = (): IToastContext => useContext(ToastContext);\n\nconst useToastProvider = (): IToastContext => {\n  const [toasts, setToasts] = useState<IToast[]>([]);\n\n  const add = useCallback(\n    (content, autoHide = true, type: EToastTypes = EToastTypes.INFO): void => {\n      const id = Math.random().toString(36).substring(2) + Date.now().toString(36);\n\n      setToasts([\n        ...toasts,\n        {\n          id,\n          content,\n          autoHide,\n          type,\n        },\n      ]);\n    },\n    [toasts],\n  );\n\n  const remove = useCallback(\n    (id): void => {\n      setToasts(toasts.filter((toast): boolean => toast.id !== id));\n    },\n    [toasts],\n  );\n\n  return { toasts, add, remove };\n};\n\nconst ToastProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n  const providerValue = useToastProvider();\n\n  return (\n    <ToastContext.Provider value={providerValue}>\n      {providerValue.toasts.map((toast) => (\n        <Toast key={toast.id} onRemove={(): void => providerValue.remove(toast.id)}>\n          {toast.content}\n        </Toast>\n      ))}\n      {children}\n    </ToastContext.Provider>\n  );\n};\n\nexport { ToastContext, ToastProvider, useToast };\n","import React, { useState, useEffect, useContext } from 'react';\nimport reportStorage from '../lib/services/storage/ReportStorage';\nimport { useSoot } from './Soot';\nimport { useWeb3 } from './Web3';\nimport { useToast } from './Toast';\nimport { IRepeatedEvent } from '../@types/Event.types';\n\ninterface EventsContextInterface {\n  events: string[];\n  proposedNotifications: {\n    [name: string]: string[];\n  };\n  addReportEvent: (name: string) => void;\n}\nconst eventsContext = React.createContext<EventsContextInterface>({\n  events: null,\n  proposedNotifications: null,\n  addReportEvent: () => null,\n});\n\nconst useEvents = (): EventsContextInterface => useContext(eventsContext);\n\nconst useEventsprovider = (): EventsContextInterface => {\n  const [events, setEvents] = useState<string[]>([]);\n\n  const [proposedNotifications, setProposedNotifications] = useState({});\n\n  const { sootRegistryFacade } = useSoot();\n  const { account } = useWeb3();\n  const { add } = useToast();\n\n  const fetchMyReports = async (): Promise<void> => {\n    const myReports = await sootRegistryFacade.getAllIncidentsForVictim(account.address);\n    const reportedNames = myReports.map((item) => item.name);\n    setEvents(reportedNames);\n  };\n\n  const addReportEvent = (name: string): void => {\n    setEvents([...events, name]);\n  };\n\n  useEffect(() => {\n    if (events.length) {\n      reportStorage.setReports(events);\n    }\n  }, [events]);\n\n  useEffect((): void => {\n    (async (): Promise<void> => {\n      if (sootRegistryFacade && events.length) {\n        const newProposedNotifications = { ...proposedNotifications };\n        const allRepeatedEvents = await sootRegistryFacade.getAllRepeatedEvents();\n        allRepeatedEvents.forEach((event: IRepeatedEvent) => {\n          const temp = newProposedNotifications[event.name] || [];\n          if (!temp.some((item) => item === event.author)) {\n            add(`There is another incident regarding ${event.name}`);\n            temp.push(event.author);\n            newProposedNotifications[event.name] = temp;\n          }\n        });\n        setProposedNotifications(newProposedNotifications);\n      }\n    })();\n  }, [events, sootRegistryFacade]);\n\n  useEffect(() => {\n    (async (): Promise<void> => {\n      if (sootRegistryFacade && account) {\n        if (await reportStorage.isReportStorageEmpty()) {\n          await fetchMyReports();\n        } else {\n          setEvents(await reportStorage.getAllReports());\n        }\n      }\n    })();\n  }, [sootRegistryFacade, account]);\n\n  return { events, proposedNotifications, addReportEvent };\n};\n\nconst EventsProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n  const events = useEventsprovider();\n\n  return <eventsContext.Provider value={events}>{children}</eventsContext.Provider>;\n};\n\nexport { EventsProvider, useEvents };\n","import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { useAsync } from 'react-async';\nimport { loadBingApi, Microsoft } from '../../lib/services/BingApi';\n\nexport interface IMark {\n  draggable?: boolean;\n  name: string;\n  id: string;\n  location: {\n    lat: number;\n    lng: number;\n  };\n}\n\ninterface IMapProps {\n  mapOptions?: { center: number[] };\n  marks: IMark[] | undefined;\n  height?: string;\n}\n\ninterface IBingMap {\n  entities: string[];\n}\n\nexport const BingMap: React.FC<IMapProps> = (props: IMapProps) => {\n  const { mapOptions, marks, height = '80vh' } = props;\n\n  const mapRef = useRef<HTMLDivElement>(null);\n\n  const [map, setMap] = useState<IBingMap | null>(null);\n\n  const initMap = (): IBingMap => {\n    const map = new Microsoft.Maps.Map(mapRef.current);\n    if (mapOptions) {\n      map.setOptions(mapOptions);\n    }\n\n    return map;\n  };\n\n  useAsync({\n    promiseFn: useCallback(async () => loadBingApi(), []),\n    onResolve: () => setMap(initMap()),\n  });\n\n  useEffect(() => {\n    if (map && marks?.length) {\n      marks.forEach((mark) => {\n        const loc = new Microsoft.Maps.Location(mark.location.lat, mark.location.lng);\n        const pin = new Microsoft.Maps.Pushpin(loc, {\n          title: mark.name,\n          text: mark.id,\n          draggable: mark.draggable,\n        });\n\n        //Add the pushpin to the map\n        map.entities.push(pin);\n      });\n    }\n  }, [map, marks]);\n\n  return (\n    <div\n      ref={mapRef}\n      className=\"map\"\n      style={{\n        height,\n        width: '100%',\n      }}\n    ></div>\n  );\n};\n","import React, { useState } from 'react';\nimport {\n  Box,\n  TextField,\n  Button,\n  Checkbox,\n  FormControlLabel,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n} from '@material-ui/core';\nimport { useSoot } from '../context/Soot';\nimport { usePosition } from '../hooks/usePosition';\nimport { useWeb3 } from '../context/Web3';\nimport { useEvents } from '../context/Event';\nimport { BingMap } from '../components/Map/BingMap';\n\nconst harassmentTypes = [\n  {\n    label: 'Dating violence',\n    value: 'dv',\n  },\n  {\n    label: 'Stalking',\n    value: 's',\n  },\n  {\n    label: 'Offensive behavior',\n    value: 'ob',\n  },\n  {\n    label: 'Sexual harassment',\n    value: 'sh',\n  },\n];\n\nexport const Report: React.FC = () => {\n  const { sootRegistryFacade } = useSoot();\n  const { account, getPublicKey } = useWeb3();\n  const { addReportEvent } = useEvents();\n\n  const { position } = usePosition();\n\n  const [name, setName] = useState<string>('');\n  const [type, setType] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n  const [isEncrypted, setIsEncrypted] = useState<boolean>(false);\n  const [isCurrentLocation, setIsCurrentLocation] = useState<boolean>(true);\n\n  const submit = async (): Promise<void> => {\n    if (position) {\n      sootRegistryFacade.report(\n        {\n          name,\n          description,\n          isEncrypted,\n          lat: position?.latitude,\n          lon: position?.longitude,\n        },\n        account,\n        getPublicKey,\n      );\n      addReportEvent(name);\n      setName('');\n      setDescription('');\n    }\n  };\n\n  return (\n    <form onSubmit={submit}>\n      <Box p={3} display=\"flex\" flexDirection=\"column\">\n        <Box mb={2} display=\"flex\" width={1}>\n          <FormControl fullWidth>\n            <TextField\n              variant=\"outlined\"\n              onChange={(event): void => setName(event.target.value)}\n              value={name}\n              placeholder=\"Name of the harasser\"\n            />\n          </FormControl>\n        </Box>\n        <Box mb={2} display=\"flex\" width={1}>\n          <FormControl fullWidth>\n            <TextField\n              variant=\"outlined\"\n              multiline\n              rows={4}\n              onChange={(event): void => setDescription(event.target.value)}\n              value={description}\n              placeholder=\"Describe the event\"\n            />\n          </FormControl>\n        </Box>\n        <Box mb={2} display=\"flex\" width={1}>\n          <FormControl variant=\"outlined\" fullWidth>\n            <InputLabel id=\"type\">Type of misconduct</InputLabel>\n            <Select\n              labelId=\"type\"\n              label=\"Type of misconduct\"\n              value={type}\n              onChange={(event): void => setType(event.target.value.toString())}\n            >\n              {harassmentTypes.map((item) => (\n                <MenuItem key={item.value} value={item.value}>\n                  {item.label}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Box>\n        <Box mb={2} display=\"flex\" width={1}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={isEncrypted}\n                onChange={(): void => setIsEncrypted(!isEncrypted)}\n                name=\"Encrypt the description\"\n                color=\"primary\"\n              />\n            }\n            label=\"encrypt the description?\"\n          />\n        </Box>\n        <Box mb={2} display=\"flex\" width={1}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={isCurrentLocation}\n                onChange={(): void => setIsCurrentLocation(!isCurrentLocation)}\n                name=\"Use current location\"\n                color=\"primary\"\n              />\n            }\n            label=\"Use current location\"\n          />\n        </Box>\n        {!isCurrentLocation ? (\n          <Box>\n            <BingMap\n              height=\"30vh\"\n              mapOptions={{\n                center: [position?.latitude, position?.longitude],\n              }}\n              marks={[\n                {\n                  id: '0',\n                  location: { lat: position?.latitude, lng: position?.longitude },\n                  name: 'Drag Me!',\n                  draggable: true,\n                },\n              ]}\n            />\n          </Box>\n        ) : null}\n        <Box mb={2} display=\"flex\" width={1}>\n          <Button variant=\"contained\" color=\"primary\" title=\"Report\" onClick={submit}>\n            Save the report\n          </Button>\n        </Box>\n      </Box>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { useSoot } from '../context/Soot';\nimport { IIncidentEvent } from '../@types/ISoot.types';\nimport { usePosition } from '../hooks/usePosition';\nimport { IPosition } from '../@types/Event.types';\nimport { BingMap, IMark } from '../components/Map/BingMap';\n\nexport const Locations: React.FC = () => {\n  const [incidents, setIncidents] = useState<IIncidentEvent[] | undefined>([]);\n  const [startPosition, setStartPosition] = useState<IPosition | null>(null);\n  const [endPosition, setEndPosition] = useState<IPosition | null>(null);\n\n  const { sootRegistryFacade } = useSoot();\n  const { position, error } = usePosition();\n\n  useEffect((): void => {\n    (async (): Promise<void> => {\n      if (startPosition && endPosition) {\n        const list = await sootRegistryFacade?.getAllRegisterEvents(startPosition, endPosition);\n\n        setIncidents(list);\n      }\n    })();\n  }, [startPosition, endPosition]);\n\n  useEffect((): void => {\n    (async (): Promise<void> => {\n      if (position) {\n        const response = await fetch(\n          `http://dev.virtualearth.net/REST/v1/Locations/${position.latitude},${position.longitude}?key=${process.env.REACT_APP_BING_API_KEY}`,\n        );\n        const body = await response.json();\n        const locality = body.resourceSets[0].resources[0].address.locality;\n\n        const bboxResponse = await fetch(\n          `http://dev.virtualearth.net/REST/v1/Locations?countryRegion=${process.env.REACT_APP_LOCATION}&locality=${locality}&key=${process.env.REACT_APP_BING_API_KEY}`,\n        );\n        const bboxBody = await bboxResponse.json();\n        const bbox = bboxBody.resourceSets[0].resources[0].bbox;\n\n        setStartPosition({ lat: bbox[0], lng: bbox[1] });\n        setEndPosition({ lat: bbox[2], lng: bbox[3] });\n      }\n    })();\n  }, [position]);\n\n  return (\n    <>\n      {!!error && (\n        <Alert severity=\"warning\">\n          <AlertTitle>Warning</AlertTitle>\n          Please enable location sharing to see incidents around you\n        </Alert>\n      )}\n      {!error && (\n        <BingMap\n          mapOptions={{\n            center: [position?.latitude, position?.longitude],\n          }}\n          marks={incidents?.map(\n            (item): IMark => ({ id: item.id, name: item.name, location: { lat: item.lat, lng: item.lon } }),\n          )}\n        />\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Box, IconButton, Typography } from '@material-ui/core';\nimport { List, FlagOutlined, Map, MessageTwoTone } from '@material-ui/icons';\nimport { useEvents } from '../../context/Event';\n\nexport const BottomBar: React.FC = () => {\n  const [hasNotificationProposals, setHasNotificationProposals] = useState(false);\n\n  const { proposedNotifications } = useEvents();\n\n  useEffect(() => {\n    if (proposedNotifications) {\n      setHasNotificationProposals(Object.keys(proposedNotifications).length > 0);\n    }\n  }, [proposedNotifications]);\n\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\" px={4}>\n      <Link to=\"/\" style={{ display: 'flex', flexDirection: 'column', textDecoration: 'none' }}>\n        <IconButton>\n          <FlagOutlined />\n        </IconButton>\n        <Typography variant=\"caption\">Report</Typography>\n      </Link>\n      <Link to=\"/locations\" style={{ display: 'flex', flexDirection: 'column', textDecoration: 'none' }}>\n        <IconButton>\n          <Map />\n        </IconButton>\n        <Typography variant=\"caption\">Incidents near me</Typography>\n      </Link>\n      <Link to=\"/incidents\" style={{ display: 'flex', flexDirection: 'column', textDecoration: 'none' }}>\n        <IconButton>\n          <List />\n        </IconButton>\n        <Typography variant=\"caption\">My reports</Typography>\n      </Link>\n      {hasNotificationProposals ? (\n        <Link to=\"/messenger\" style={{ display: 'flex', flexDirection: 'column', textDecoration: 'none' }}>\n          <IconButton>\n            <MessageTwoTone />\n          </IconButton>\n          <Typography variant=\"caption\">Messenger</Typography>\n        </Link>\n      ) : null}\n    </Box>\n  );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { ListItem, ListItemText } from '@material-ui/core';\nimport { Async } from 'react-async';\nimport { IFullIncident } from '../../@types/ISoot.types';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useSoot } from '../../context/Soot';\n\nexport const IncidentListItem: React.FC<{ id: number }> = (props: { id: number }) => {\n  const { id } = props;\n\n  const { sootRegistryFacade } = useSoot();\n  const history = useHistory();\n\n  return (\n    <Async\n      promiseFn={(): Promise<IFullIncident> => sootRegistryFacade.getIncident(id)}\n      onReject={(error: Error): void => console.debug(error)}\n    >\n      <Async.Pending>\n        <React.Fragment>\n          <Skeleton variant=\"text\" animation=\"wave\" />\n          <Skeleton variant=\"text\" animation=\"wave\" />\n        </React.Fragment>{' '}\n      </Async.Pending>\n      <Async.Fulfilled>\n        {(incident: IFullIncident): React.ReactNode => (\n          <ListItem>\n            <ListItemText\n              primary={incident.name}\n              secondary={incident.date}\n              onClick={(): void => history.push(`incidents/${id}`)}\n            />\n          </ListItem>\n        )}\n      </Async.Fulfilled>\n      <Async.Rejected>{`could not fetch the incident`}</Async.Rejected>\n    </Async>\n  );\n};\n","import React, { ReactElement } from 'react';\nimport { useSoot } from '../context/Soot';\nimport { useWeb3 } from '../context/Web3';\nimport { List } from '@material-ui/core';\nimport { IncidentListItem } from '../components/Incident/IncidentListItem';\nimport { Async } from 'react-async';\nimport { Skeleton } from '@material-ui/lab';\n\nexport const Incidents: React.FC = () => {\n  const { sootRegistryFacade } = useSoot();\n  const { account } = useWeb3();\n\n  return (\n    <Async\n      promiseFn={(): Promise<string[]> => sootRegistryFacade.getAllIncidentIdsForVictim(account.address)}\n      onReject={(error: Error): void => console.debug(error)}\n    >\n      <Async.Pending>\n        <Skeleton animation=\"wave\" />\n      </Async.Pending>\n      <Async.Fulfilled>\n        {(list: string[]): React.ReactNode => (\n          <List>\n            {list.map(\n              (id: string): ReactElement => (\n                <IncidentListItem key={id} id={Number(id)} />\n              ),\n            )}\n          </List>\n        )}\n      </Async.Fulfilled>\n      <Async.Rejected>{`could not fetch the incidents`}</Async.Rejected>\n    </Async>\n  );\n};\n","import { Account } from 'web3-core';\nimport { getContent } from '../services/IpfsService';\nimport { decrypt } from '../services/EncryptionService';\n\nexport const loadDescription = async (account: Account, cid: string, isEncrypted: boolean): Promise<string> => {\n  let content = await getContent(cid);\n\n  if (isEncrypted) {\n    const decryptedContent = await decrypt(account, content);\n    content = decryptedContent.message;\n  }\n\n  return content;\n};\n","import React from 'react';\nimport { FilledInput, Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { IFullIncident } from '../../@types/ISoot.types';\nimport { useWeb3 } from '../../context/Web3';\nimport { loadDescription } from '../../lib/scripts/loadDescription';\nimport { useParams } from 'react-router-dom';\nimport { useSoot } from '../../context/Soot';\nimport { BingMap } from '../Map/BingMap';\nimport { Async } from 'react-async';\n\nexport const IncidentDetail: React.FC = () => {\n  const { incidentId } = useParams<{ incidentId: string }>();\n\n  const { account } = useWeb3();\n  const { sootRegistryFacade } = useSoot();\n\n  return (\n    <Async\n      promiseFn={(): Promise<IFullIncident> => sootRegistryFacade.getIncident(Number(incidentId))}\n      onReject={(error: Error): void => console.debug(error)}\n    >\n      <Async.Pending>\n        <Skeleton />\n      </Async.Pending>\n      <Async.Fulfilled>\n        {(incident: IFullIncident): React.ReactNode => (\n          <Box display=\"flex\" flexDirection=\"column\" p={2}>\n            <FilledInput value={incident.author} />\n            <FilledInput value={incident.name} />\n            <FilledInput value={incident.date} />\n            <Async\n              promiseFn={(): Promise<string> => loadDescription(account, incident.cid, incident.isEncrypted)}\n              onReject={(error: Error): void => console.debug(error)}\n            >\n              <Async.Pending>\n                <Skeleton />\n              </Async.Pending>\n              <Async.Fulfilled>\n                {(description: string): React.ReactNode => <FilledInput value={description} />}\n              </Async.Fulfilled>\n              <Async.Rejected>{`could not fetch the description`}</Async.Rejected>\n            </Async>\n            <BingMap\n              mapOptions={{\n                center: [incident.lat, incident.lon],\n              }}\n              marks={[{ id: '1', name: incident.name, location: { lat: incident.lat, lng: incident.lon } }]}\n              height=\"50vh\"\n            />\n          </Box>\n        )}\n      </Async.Fulfilled>\n      <Async.Rejected>{`could not fetch the incident`}</Async.Rejected>\n    </Async>\n  );\n\n  // return incident ? (\n  //   <Box display=\"flex\" flexDirection=\"column\" p={2}>\n  //     <FilledInput value={incident.author} />\n  //     <FilledInput value={incident.name} />\n  //     <FilledInput value={incident.date} />\n  //     {description ? <FilledInput value={description} /> : <Skeleton />}\n  //     <BingMap\n  //       mapOptions={{\n  //         center: [incident.lat, incident.lon],\n  //       }}\n  //       marks={[{ id: '1', name: incident.name, location: { lat: incident.lat, lng: incident.lon } }]}\n  //       height=\"50vh\"\n  //     />\n  //   </Box>\n  // ) : (\n  //   <Box>\n  //     <Skeleton />\n  //   </Box>\n  // );\n};\n","import { Box, ListItem, ListItemText } from '@material-ui/core';\nimport makeBlockie from 'ethereum-blockies-base64';\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\n\ninterface IMessengerListItemProps {\n  title: string;\n  participants: string[];\n}\n\nexport const MessengerListItem: React.FC<IMessengerListItemProps> = (props: IMessengerListItemProps) => {\n  const { title, participants } = props;\n\n  const history = useHistory();\n\n  return (\n    <ListItem>\n      <ListItemText\n        primary={`Topic: ${title}`}\n        secondary={\n          <Box component=\"span\" display=\"flex\" alignContent=\"center\">\n            Start chatting with\n            {participants.map((item: string) => (\n              <img\n                key={item}\n                src={makeBlockie(item)}\n                title={item}\n                alt={item}\n                style={{ marginLeft: '5px', width: '30px', borderRadius: '4px' }}\n              />\n            ))}\n          </Box>\n        }\n        onClick={(): void => history.push(`chat/${title}`, participants)}\n      />\n    </ListItem>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useEvents } from '../context/Event';\nimport { List } from '@material-ui/core';\nimport { MessengerListItem } from '../components/Messenger/MessengerListItem';\n\nexport const Messenger: React.FC = () => {\n  const { proposedNotifications } = useEvents();\n  const [newProposedNotifications, setNewProposedNotifications] = useState([]);\n\n  useEffect((): void => {\n    setNewProposedNotifications(\n      Object.keys(proposedNotifications).map((key, index) => ({\n        id: index,\n        title: key,\n        participants: proposedNotifications[key],\n      })),\n    );\n  }, [proposedNotifications]);\n\n  return newProposedNotifications.length ? (\n    <List>\n      {newProposedNotifications.map((item) => (\n        <MessengerListItem key={item.id} title={item.title} participants={item.participants} />\n      ))}\n    </List>\n  ) : null;\n};\n","import { IChatItem, IChatStorage } from '../../../@types/IChat.types';\nimport storage from './AppStorage.service';\nimport LocalStorage from './LocalStorage';\n\nclass ChatStorage {\n  public storage: LocalStorage;\n\n  private readonly chatKey = 'chats';\n\n  constructor() {\n    this.storage = storage;\n    this.checkChatStorage();\n  }\n\n  public async getAllChats(): Promise<IChatItem[]> {\n    const storedData: IChatStorage = await this.storage.getItem(this.chatKey);\n\n    return storedData.items;\n  }\n\n  public async addChat(report: IChatItem): Promise<void> {\n    const storedData: IChatStorage = await this.storage.getItem(this.chatKey);\n    storedData.items.push(report);\n    this.storage.setItem(this.chatKey, storedData);\n  }\n\n  private async createChatStorage(): Promise<void> {\n    this.storage.setItem(this.chatKey, {\n      items: [],\n    });\n  }\n\n  private async checkChatStorage(): Promise<boolean> {\n    try {\n      const storedData = await this.storage.getItem(this.chatKey);\n\n      if (!storedData) {\n        throw new Error();\n      }\n\n      return true;\n    } catch {\n      await this.createChatStorage();\n\n      return false;\n    }\n  }\n}\n\nconst chatStorage = new ChatStorage();\n\nexport default chatStorage;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useAsync } from 'react-async';\nimport { Send } from '@material-ui/icons';\nimport { Box, IconButton, TextField, Typography } from '@material-ui/core';\nimport makeBlockie from 'ethereum-blockies-base64';\nimport { useWeb3 } from '../context/Web3';\nimport { subscribe, publish, unsubscribe } from '../lib/services/IpfsService';\nimport chatStorage from '../lib/services/storage/ChatStorage';\nimport { IChatItem } from '../@types/IChat.types';\n\nexport const MessengerChat: React.FC = () => {\n  const { name } = useParams<{ name: string }>();\n  const location: { state: string[] } = useLocation();\n  const { account } = useWeb3();\n\n  const [participants, setParticipants] = useState([]);\n  const [messageList, setMessageList] = useState<IChatItem[]>([]);\n  const [currentText, setCurrentText] = useState('');\n\n  const subscription = (data): void => {\n    const item = {\n      id: data.seqno,\n      text: data.content,\n      avatar: makeBlockie(data.from),\n      address: data.from,\n    };\n    chatStorage.addChat(item);\n    setMessageList([...messageList, item]);\n  };\n\n  const sendMessage = (e): void => {\n    e.preventDefault();\n    publish(name, currentText, account.address);\n    setCurrentText('');\n  };\n\n  useEffect(() => {\n    if (account) {\n      if (!location.state || !Array.isArray(location.state)) {\n        console.debug('wrong state parameter');\n      }\n      setParticipants([...location.state, account.address]);\n    }\n  }, [location.state, account]);\n\n  useEffect(() => {\n    if (participants.length) {\n      subscribe(name, account.address, subscription);\n    }\n\n    return (): void => {\n      unsubscribe(name);\n    };\n  }, [participants, messageList]);\n\n  useAsync({\n    promiseFn: useCallback(chatStorage.getAllChats, []),\n    onResolve: (initialChats) => setMessageList(initialChats),\n  });\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-end\" height=\"100%\">\n      <Box display=\"flex\" flexDirection=\"row\" width=\"1\" flex=\"1\">\n        Topic: {name}\n      </Box>\n\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        width=\"1\"\n        flex=\"10\"\n        alignItems=\"start\"\n        style={{ overflowY: 'auto', maxHeight: '70vh' }}\n      >\n        {messageList.map((message) => (\n          <Box\n            key={message.id}\n            py={0.5}\n            display=\"flex\"\n            alignItems=\"center\"\n            flexDirection={message.address === account.address ? 'row' : 'row-reverse'}\n            alignSelf={message.address === account.address ? 'flex-start' : 'flex-end'}\n          >\n            <img\n              src={message.avatar}\n              alt={message.address}\n              style={{ width: '40px', borderRadius: '9px', marginRight: '5px', marginLeft: '5px' }}\n            />\n            <Typography>{message.text}</Typography>\n          </Box>\n        ))}\n      </Box>\n      <form onSubmit={sendMessage}>\n        <Box display=\"flex\" flexDirection=\"row\" width=\"1\" flex=\"1\">\n          <TextField\n            id=\"current-text\"\n            variant=\"outlined\"\n            style={{ flex: 1 }}\n            value={currentText}\n            onChange={(e): void => setCurrentText(e.target.value)}\n          />\n          <IconButton aria-label=\"send\" size=\"small\" onClick={sendMessage}>\n            <Send fontSize=\"inherit\" />\n          </IconButton>\n        </Box>\n      </form>\n    </Box>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nexport const MenuBar: React.FC = () => {\n  const location = useLocation();\n  const [menuName, setMenuName] = useState('');\n\n  useEffect(() => {\n    let name = location.pathname;\n    switch (location.pathname) {\n      case '/':\n        name = 'Report a misconduct';\n        break;\n      case '/locations':\n        name = 'Map';\n        break;\n      case '/messenger':\n        name = 'Messenger';\n        break;\n      case '/incidents':\n        name = 'My reports';\n        break;\n\n      default:\n        break;\n    }\n    setMenuName(name);\n  }, [location.pathname]);\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" align=\"center\">\n          {menuName}\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { Report } from '../../pages/Report';\nimport { Locations } from '../../pages/Locations';\nimport { Box } from '@material-ui/core';\nimport { BottomBar } from './BottomBar';\nimport { Incidents } from '../../pages/Incidents';\nimport { IncidentDetail } from '../Incident/IncidentDetail';\nimport { Messenger } from '../../pages/Messenger';\nimport { MessengerChat } from '../../pages/MessengerChat';\nimport { MenuBar } from './MenuBar';\n\nexport const Navigation: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <MenuBar />\n      <Box style={{ height: '80vh' }}>\n        <Switch>\n          <Route exact path=\"/\">\n            <Report />\n          </Route>\n          <Route exact path=\"/locations\">\n            <Locations />\n          </Route>\n          <Route exact path=\"/messenger\">\n            <Messenger />\n          </Route>\n          <Route exact path=\"/incidents\">\n            <Incidents />\n          </Route>\n          <Route exact path=\"/chat/:name\">\n            <MessengerChat />\n          </Route>\n          <Route path=\"/incidents/:incidentId\">\n            <IncidentDetail />\n          </Route>\n        </Switch>\n      </Box>\n      <BottomBar />\n    </BrowserRouter>\n  );\n};\n","import React from 'react';\nimport { useSoot } from '../context/Soot';\nimport { Login } from './Auth/Login';\nimport { Navigation } from './Layout/Navigation';\n\nexport const App: React.FC = () => {\n  const { sootRegistryFacade } = useSoot();\n\n  return sootRegistryFacade ? <Navigation /> : <Login />;\n};\n","import React, { useContext } from 'react';\nimport { useAsync, AsyncState } from 'react-async';\nimport IPFS from 'ipfs';\nimport { IpfsContextInterface } from '../@types/IpfsContextInterface';\nimport { startNode } from '../lib/services/IpfsService';\n\nconst ipfsContext = React.createContext<IpfsContextInterface>({\n  ipfs: null,\n  isPending: false,\n});\n\nconst useIpfs = (): IpfsContextInterface => useContext(ipfsContext);\n\nconst useIpfsProvider = (): IpfsContextInterface => {\n  const { data: ipfs, isPending }: AsyncState<IPFS> = useAsync({\n    promiseFn: startNode,\n    onReject: (error: Error) => console.debug(error),\n  });\n\n  return { ipfs, isPending };\n};\n\nconst IpfsProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n  const ipfs = useIpfsProvider();\n\n  return <ipfsContext.Provider value={ipfs}>{children}</ipfsContext.Provider>;\n};\n\nexport { IpfsProvider, useIpfs };\n","import React from 'react';\nimport { Alert } from '@material-ui/lab';\nimport { useWeb3 } from '../context/Web3';\nimport { useIpfs } from '../context/IPFS';\n\nexport const ContextAwareApp: React.FC = ({ children }: { children: React.ReactNode }) => {\n  const { web3Instance } = useWeb3();\n  const { isPending, ipfs } = useIpfs();\n\n  return !!web3Instance && !isPending && !!ipfs ? (\n    <>{children}</>\n  ) : (\n    <>\n      <Alert icon={false} severity=\"info\">\n        Loading...\n      </Alert>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Web3Provider } from './context/Web3';\nimport { SootProvider } from './context/Soot';\nimport { App } from './components/App';\nimport { IpfsProvider } from './context/IPFS';\nimport { EventsProvider } from './context/Event';\nimport { ToastProvider } from './context/Toast';\nimport Container from '@material-ui/core/Container';\nimport { ContextAwareApp } from './components/ContextAwarApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Container maxWidth=\"sm\" style={{ backgroundColor: 'white', height: '100vh', paddingLeft: 0, paddingRight: 0 }}>\n      <ToastProvider>\n        <Web3Provider>\n          <SootProvider>\n            <IpfsProvider>\n              <EventsProvider>\n                <ContextAwareApp>\n                  <App />\n                </ContextAwareApp>\n              </EventsProvider>\n            </IpfsProvider>\n          </SootProvider>\n        </Web3Provider>\n      </ToastProvider>\n    </Container>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}